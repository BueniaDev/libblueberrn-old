cmake_minimum_required(VERSION 3.13)
project(libblueberrn)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(BUILD_EXAMPLE "Enables the example renderer (requires SDL2)." OFF)

set(LIBBLUEBERRN_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libblueberrn/include")

include_directories(AFTER PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/libblueberrn/components")
include_directories(AFTER PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/libblueberrn/include/libblueberrn")
include_directories(AFTER PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/libblueberrn/include/drivers")

if (BUILD_EXAMPLE STREQUAL "ON")
	add_subdirectory(example/sdl2)
endif()

add_subdirectory(libblueberrn)

add_library(blueberrn ${LIBBLUEBERRN} ${LIBBLUEBERRN_HEADERS})
target_include_directories(blueberrn PUBLIC ${LIBBLUEBERRN_INCLUDE_DIR})
target_compile_definitions(blueberrn PRIVATE LIBBLUEBERRN_STATIC=1 _CRT_SECURE_NO_WARNINGS=1)
target_link_libraries(blueberrn PUBLIC components)
add_library(libblueberrn ALIAS blueberrn)

if (WIN32)
    message(STATUS "Operating system is Windows.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(blueberrn PRIVATE -Wall -Wextra)
	message(STATUS "Compiler is MinGW.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL MSVC)
	message(STATUS "MSVC support is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	target_compile_options(blueberrn PRIVATE /W4)
	message(STATUS "Compiler is MSVC.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	message(STATUS "Clang support on Windows is HIGHLY experimental, and may not even compile correctly, so be EXTREMELY careful here!")
	target_compile_options(blueberrn PRIVATE -Wall -Wextra)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif(UNIX AND NOT APPLE)
    message(STATUS "Operating system is Linux.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL GNU)
	target_compile_options(blueberrn PRIVATE -Wall -Wextra)
	message(STATUS "Compiler is GCC.")
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL Clang)
	target_compile_options(blueberrn PRIVATE -Wall -Wextra)
	message(STATUS "Compiler is Clang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
elseif(APPLE)
    message(STATUS "Operating system is Mac.")
    if (CMAKE_CXX_COMPILER_ID STREQUAL AppleClang)
	target_compile_options(blueberrn PRIVATE -Wall -Wextra)
	message(STATUS "Compiler is AppleClang.")
    else()
	message(SEND_ERROR "Compiler not supported.")
	return()
    endif()
else()
    message(SEND_ERROR "Operating system not supported.")
    return()
endif()